[
    {
        "id": "7caf0b2588c2eb5b",
        "type": "function",
        "z": "64c0f4982b5ba581",
        "name": "Mediator",
        "func": "// Check if the 'key' property exists in 'msg.payload'\nif (msg.payload?.key) {\n    // Get the 'data' object from the Node-RED flow context\n    let data = flow.get(\"data\");\n\n    // Create a copy of 'data' and store it in 'last_data'\n    flow.set(\"last_data\", JSON.parse(JSON.stringify(data)));\n    // Update the value of a specific key in 'data' using values from 'msg.payload'\n    data[msg.payload.key].value = msg.payload.value;\n    if (msg.payload.key === \"status\") {\n        if (msg.payload.value === false) {\n            flow.set(\"last_online\", JSON.parse(JSON.stringify(data)));\n            for (let key in data) {\n                data[key].enabled = false;\n            }\n        } else {\n            const lastOnline = flow.get(\"last_online\")\n            for (let key in lastOnline) {\n                data[key].enabled = lastOnline[key].enabled;\n            }\n        }\n    }\n    // Check if the 'key' is 'mode'\n    else if (msg.payload.key === \"mode\") {\n        // Check if 'value' is 0\n        if (msg.payload.value === 0) {\n            // Disable all keys in 'data' except 'mode' and 'protocol'\n            for (let key in data) {\n                if (key !== \"mode\" && key !== \"protocol\" && key !== \"lockProtocol\") {\n                    data[key].enabled = false;\n                }\n            }\n        }\n        // Check if 'value' is 1\n        else if (msg.payload.value === 1) {\n            // Enable or disable keys in 'data' based on specific conditions\n            for (let key in data) {\n                if (key !== \"mode\" && key !== \"protocol\") {\n                    if (key === \"swingh\") {\n                        data[key].enabled = !data[\"autoSwingh\"].value;\n                    } else if (key === \"swingv\") {\n                        data[key].enabled = !data[\"autoSwingv\"].value;\n                    } else if (key === \"timer\" || key === \"scheduler\" || key === \"threshold\" || key === \"duration\") {\n                        data[key].enabled = false;\n                    } else {\n                        data[key].enabled = true;\n                    }\n                }\n            }\n        }\n        // Check if 'value' is 2\n        else if (msg.payload.value === 2) {\n            // Enable or disable keys in 'data' based on specific conditions\n            for (let key in data) {\n                if (key !== \"mode\" && key !== \"protocol\") {\n                    if (key === \"swingh\") {\n                        data[key].enabled = !data[\"autoSwingh\"].value;\n                    } else if (key === \"swingv\") {\n                        data[key].enabled = !data[\"autoSwingv\"].value;\n                    } else {\n                        data[key].enabled = true;\n                    }\n                }\n            }\n        }\n    }\n    // Check if the 'key' is 'autoSwingv'\n    else if (msg.payload.key === \"autoSwingv\") {\n        // Toggle the 'enabled' property of 'swingv' based on 'value'\n        data[\"swingv\"].enabled = !msg.payload.value;\n    }\n    // Check if the 'key' is 'autoSwingh'\n    else if (msg.payload.key === \"autoSwingh\") {\n        // Toggle the 'enabled' property of 'swingh' based on 'value'\n        data[\"swingh\"].enabled = !msg.payload.value;\n    }\n    // Check if the 'key' is 'duration'\n    else if (msg.payload.key === \"duration\") {\n        // If 'timer' is 0, set the 'duration' value to 0\n        if (data.timer.value === 0) {\n            data.duration.value = 0;\n        }\n    }\n\n    // Update the 'data' object in the Node-RED flow context\n    flow.set(\"data\", data);\n\n    // Store the 'key' in a variable\n    const key = msg.payload.key;\n\n    // Update 'msg.payload' with the modified 'data' and 'changed' property\n    msg.payload = data;\n    msg.payload.changed = key;\n\n    // Return the modified 'msg' object\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "const data = {\n    protocol: {\n        enabled: true,\n        value: 0\n    },\n    mode: {\n        enabled: true,\n        value: 0\n    },\n    degrees: {\n        enabled: true,\n        value: 25\n    },\n    currentTemperature: {\n        enabled: true,\n        value: 25\n    },\n    fanspeed: {\n        enabled: true,\n        value: 0\n    },\n    swingv: {\n        enabled: true,\n        value: 3\n    },\n    swingh: {\n        enabled: true,\n        value: 3\n    },\n    autoSwingv: {\n        enabled: true,\n        value: true\n    },\n    autoSwingh: {\n        enabled: true,\n        value: true\n    },\n    timer: {\n        enabled: true,\n        value: 0\n    },\n    scheduler: {\n        enabled: true,\n        value: false\n    },\n    threshold: {\n        enabled: true,\n        value: 25\n    },\n    power: {\n        enabled: true,\n        value: false\n    },\n    countdown: {\n        enabled: true,\n        value: false\n    },\n    duration: {\n        enabled: true,\n        value: 0\n    },\n    status: {\n        enabled: true,\n        value: true\n    },\n    lockProtocol: {\n        enabled: true,\n        value: false\n    }\n};\n\nflow.set(\"data\", JSON.parse(JSON.stringify(data)));\nflow.set(\"last_data\", JSON.parse(JSON.stringify(data)));",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 400,
        "wires": [
            [
                "940785374aa16542",
                "6c68b29df8abc4c0"
            ]
        ]
    }
]